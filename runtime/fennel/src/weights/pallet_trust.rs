
//! Autogenerated weights for pallet_trust
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-26, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Seans-Mac-Mini`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_trust
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/weight-template.hbs
// --output=./runtime/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_trust.
pub trait WeightInfo {
	fn set_trust_parameter() -> Weight;
	fn issue_trust() -> Weight;
	fn issue_trust_repeatedly() -> Weight;
	fn revoke_trust() -> Weight;
	fn revoke_trust_from_heavy_storage() -> Weight;
	fn remove_trust() -> Weight;
	fn remove_trust_from_heavy_storage() -> Weight;
	fn request_trust() -> Weight;
	fn request_trust_repeatedly() -> Weight;
	fn remove_revoked_trust() -> Weight;
	fn remove_revoked_trust_heavy_storage() -> Weight;
	fn cancel_trust_request() -> Weight;
	fn cancel_trust_request_heavy_storage() -> Weight;
}

/// Weights for pallet_trust using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `Trust::TrustParameterList` (r:0 w:1)
	// Proof: `Trust::TrustParameterList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	fn set_trust_parameter() -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(6_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn issue_trust() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(10_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn issue_trust_repeatedly() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn revoke_trust() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn revoke_trust_from_heavy_storage() -> Weight {
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_trust() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(12_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_trust_from_heavy_storage() -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn request_trust() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn request_trust_repeatedly() -> Weight {
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_revoked_trust() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(13_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_revoked_trust_heavy_storage() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cancel_trust_request() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(12_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cancel_trust_request_heavy_storage() -> Weight {
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_ref_time(28_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Trust::TrustParameterList` (r:0 w:1)
	// Proof: `Trust::TrustParameterList` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	fn set_trust_parameter() -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(6_000_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn issue_trust() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(10_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn issue_trust_repeatedly() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn revoke_trust() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn revoke_trust_from_heavy_storage() -> Weight {
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_trust() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(12_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustIssuance` (r:1 w:1)
	// Proof: `Trust::TrustIssuance` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentIssued` (r:1 w:1)
	// Proof: `Trust::CurrentIssued` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_trust_from_heavy_storage() -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn request_trust() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn request_trust_repeatedly() -> Weight {
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_revoked_trust() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(13_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRevocation` (r:1 w:1)
	// Proof: `Trust::TrustRevocation` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRevoked` (r:1 w:1)
	// Proof: `Trust::CurrentRevoked` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_revoked_trust_heavy_storage() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cancel_trust_request() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(12_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: `Trust::TrustRequestList` (r:1 w:1)
	// Proof: `Trust::TrustRequestList` (`max_values`: None, `max_size`: Some(100), added: 2575, mode: `MaxEncodedLen`)
	// Storage: `Trust::CurrentRequests` (r:1 w:1)
	// Proof: `Trust::CurrentRequests` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cancel_trust_request_heavy_storage() -> Weight {
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_ref_time(28_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}
