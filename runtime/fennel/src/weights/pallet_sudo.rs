
//! Autogenerated weights for pallet_sudo
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-26, STEPS: `100`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Seans-Mac-Mini`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/fennel-node
// benchmark
// pallet
// --chain=dev
// --wasm-execution=compiled
// --pallet=pallet_sudo
// --extrinsic=*
// --steps=100
// --repeat=100
// --template=./scripts/templates/weight-template.hbs
// --output=./runtime/src/weights

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_sudo.
pub trait WeightInfo {
	fn set_key() -> Weight;
	fn sudo() -> Weight;
	fn sudo_as() -> Weight;
	fn remove_key() -> Weight;
}

/// Weights for pallet_sudo using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `Sudo::Key` (r:1 w:1)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_key() -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: `Sudo::Key` (r:1 w:0)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn sudo() -> Weight {
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: `Sudo::Key` (r:1 w:0)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn sudo_as() -> Weight {
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: `Sudo::Key` (r:1 w:1)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn remove_key() -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(7_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Sudo::Key` (r:1 w:1)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_key() -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: `Sudo::Key` (r:1 w:0)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn sudo() -> Weight {
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: `Sudo::Key` (r:1 w:0)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn sudo_as() -> Weight {
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(9_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: `Sudo::Key` (r:1 w:1)
	// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn remove_key() -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(7_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
